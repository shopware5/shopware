<?xml version="1.0" encoding="utf-8"?>
<project name="Shopware" basedir="../" default="build">

    <property name="build.dir" location="${basedir}/build"/>

    <property file="${build.dir}/build.properties"/>
    <property file="${build.dir}/build.properties.dist"/>

    <target name="build" depends="build-daily"/>

    <target name="build-daily" depends="build-log-dir">
        <parallel>
            <antcall target="test-unit"/>
            <antcall target="test-static"/>
        </parallel>
        <parallel>
            <antcall target="build-phpcb"/>
        </parallel>
    </target>

    <target name="build-continuous" depends="unit-shopware-continuous"/>
    <target name="build-unit" depends="build-composer-install, build-cache-dir, build-database, build-snippets-deploy, build-theme-initialize,build-create-admin-account, build-install-lock-file, build-disable-firstrunwizard, install-git-hooks"/>
    <target name="test-unit" depends="unit-shopware"/>

    <target name="write-properties" description="Write build-variables to file">
        <propertyfile file="${build.dir}/build.properties" comment="Project properties">
            <entry key="db.host" value="${db.host}"/>
            <entry key="db.name" value="${db.name}"/>
            <entry key="db.user" value="${db.user}"/>
            <entry key="db.password" value="${db.password}"/>
            <entry key="db.port" value="${db.port}"/>
            <entry key="app.path" value="${app.path}"/>
            <entry key="app.host" value="${app.host}"/>
        </propertyfile>
    </target>

    <target name="configure" description="Set up build-variables">
        <input message="Please enter db-host:"
               addproperty="user.db.host"
               defaultvalue="${db.host}"/>

        <input message="Please enter db-port:"
               addproperty="user.db.port"
               defaultvalue="${db.port}"/>

        <input message="Please enter db-name:"
               addproperty="user.db.name"
               defaultvalue="${db.name}"/>

        <input message="Please enter db-username:"
               addproperty="user.db.user"
               defaultvalue="${db.user}"/>

        <input message="Please enter db-password:"
               addproperty="user.db.password">
        </input>

        <input message="Please enter app.host (Hostname e.g. example.com):"
               addproperty="user.app.host"
               defaultvalue="${app.host}"/>

        <input message="Please enter app.path (e.g. /shopware. Leave blank if installed in document root):"
               addproperty="user.app.path"
               defaultvalue="${app.path}"/>

        <antcall target="write-properties">
            <param name="db.host" value="${user.db.host}"/>
            <param name="db.port" value="${user.db.port}"/>
            <param name="db.name" value="${user.db.name}"/>
            <param name="db.user" value="${user.db.user}"/>
            <param name="db.password" value="${user.db.password}"/>
            <param name="db.port" value="${user.db.port}"/>
            <param name="app.host" value="${user.app.host}"/>
            <param name="app.path" value="${user.app.path}"/>
        </antcall>
    </target>

    <target name="check-composer-binary">
        <available file="${basedir}/composer.phar" property="composer.binary.present"/>
    </target>

    <target name="install-composer-binary" depends="check-composer-binary" unless="composer.binary.present">
        <exec executable="bash" failonerror="true">
            <arg value="-c"/>
            <arg value="curl -s https://getcomposer.org/installer | ${script.php}"/>
        </exec>
    </target>

    <target name="update-composer-binary" depends="install-composer-binary">
        <exec executable="${script.php}">
            <arg value="composer.phar"/>
            <arg value="self-update"/>
            <arg value="--2"/>
            <arg value="--no-interaction"/>
        </exec>
    </target>

    <target name="build-composer-install" depends="update-composer-binary">
        <exec executable="${script.php}" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="update"/>
            <arg value="laminas/laminas-code cocur/slugify"/>
        </exec>

        <exec executable="${script.php}" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="install"/>
            <arg value="--no-interaction"/>
            <arg value="--optimize-autoloader"/>
            <arg value="--no-suggest"/>
        </exec>
    </target>

    <target name="build-composer-update" depends="update-composer-binary">
        <exec executable="${script.php}" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="update"/>
            <arg value="--no-interaction"/>
        </exec>
    </target>

    <target name="check-code-style" depends="build-composer-install">
        <exec executable="${script.php}" failonerror="true">
            <arg value="vendor/bin/php-cs-fixer"/>
            <arg value="fix"/>
            <arg value="--dry-run"/>
            <arg value="--stop-on-violation"/>
            <arg value="--verbose"/>
            <arg value="--show-progress=dots"/>
        </exec>
    </target>

    <target name="build-database" depends="build-database-foundation, build-database-deploy-demodata"/>

    <target name="build-create-admin-account">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:admin:create"/>
            <arg value="--name=Demo user"/>
            <arg value="--email=demo@example.com"/>
            <arg value="--username=demo"/>
            <arg value="--password=demo"/>
            <arg value="--locale=de_DE"/>
        </exec>
    </target>

    <target name="build-database-foundation">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:database:setup"/>
            <arg value="--steps=drop,create,import,setupShop"/>
            <arg value="--host=${app.host}"/>
            <arg value="--path=${app.path}"/>
        </exec>
    </target>

    <target name="build-database-apply-deltas">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:migrations:migrate --mode=install"/>
        </exec>
    </target>

    <target name="build-database-deploy-demodata">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:database:setup"/>
            <arg value="--steps=importDemodata,setupShop"/>
            <arg value="--host=${app.host}"/>
            <arg value="--path=${app.path}"/>
        </exec>
    </target>

    <target name="build-generate-attributes">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:generate:attributes"/>
        </exec>
    </target>

    <target name="build-snippets-deploy">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:snippets:to:db --include-plugins"/>
        </exec>
    </target>

    <target name="build-theme-initialize">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:theme:initialize"/>
        </exec>
    </target>

    <target name="build-disable-firstrunwizard">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:firstrunwizard:disable"/>
        </exec>
    </target>

    <target name="install-git-hooks">
        <mkdir dir="${basedir}/.git/hooks/"/>
        <symlink link="${basedir}/.git/hooks/pre-commit" resource="${build.dir}/gitHooks/pre-commit" overwrite="true"/>
    </target>

    <target name="build-install-lock-file">
        <tstamp>
            <format property="installDate" pattern="yyyyMMddHHmm"/>
        </tstamp>

        <echo file="${basedir}/recovery/install/data/install.lock">${installDate}</echo>
    </target>

    <target name="build-cache-dir">
        <exec executable="${script.php}" dir="${basedir}/bin" failonerror="true">
            <arg line="console sw:cache:clear"/>
        </exec>
    </target>

    <target name="build-log-dir">
        <delete includeemptydirs="true">
            <fileset dir="${log.dir}">
                <include name="**/*.*"/>
                <exclude name=".htaccess"/>
                <exclude name=".gitkeep"/>
            </fileset>
        </delete>
        <mkdir dir="${log.dir}/"/>
    </target>

    <target name="unit-shopware" depends="build-unit">
        <exec executable="${script.phpunit}" failonerror="false" dir="${test.dir.shopware}">
            <arg value="--log-junit=${log.dir}/junit.xml"/>
            <arg value="--coverage-clover=${log.dir}/clover.xml"/>
            <arg value="--coverage-html=${log.dir}/coverage"/>
        </exec>
    </target>

    <target name="unit-shopware-continuous" depends="build-unit">
        <exec executable="${script.phpunit}" failonerror="true" dir="${test.dir.shopware}">
            <arg value="--config=phpunit_unit.xml.dist"/>
            <arg value="--exclude-group=elasticSearch"/>
        </exec>

        <exec executable="${script.phpunit}" failonerror="true" dir="${test.dir.shopware}">
            <arg value="--log-junit=${log.dir}/junit.xml"/>
            <arg value="--exclude-group=elasticSearch"/>
        </exec>
    </target>

    <target name="unit-continuous-es">
        <exec executable="${script.phpunit}" failonerror="true" dir="${test.dir.shopware}">
            <arg value="--exclude-group=skipElasticSearch"/>
            <arg value="--group=elasticSearch"/>
            <arg value="--log-junit=${log.dir}/junit.xml"/>
        </exec>
    </target>

    <target name="karma-shopware-continuous">
        <exec executable="${script.karma}" failonerror="true" dir="${log.dir}">
            <arg value="start"/>
            <arg value="${karma.config}"/>
            <arg value="${log.dir}/karma/"/>
        </exec>
    </target>

    <target name="start-server">
        <exec executable="${script.server.start}" failonerror="true">
            <arg value="${app.host}"/>
        </exec>
    </target>

    <target name="stop-server">
        <exec executable="${script.server.stop}"/>
    </target>

    <target name="mink-shopware-continuous-responsive">
        <exec executable="${script.behat}" dir="${test.dir}/Mink">
            <env key="BEHAT_PARAMS" value='{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "http://${app.host}${app.path}"}}}'/>
            <arg value="--format=pretty"/>
            <arg value="--out=std"/>
            <arg value="--format=junit"/>
            <arg value="--out=${log.dir}/mink"/>
        </exec>
    </target>

    <target name="test-static" depends="build-log-dir">
        <parallel>
            <antcall target="static-lint"/>
            <antcall target="static-phpcs"/>
            <antcall target="static-phpmd"/>
            <antcall target="static-phpcpd"/>
            <antcall target="static-phploc"/>
            <antcall target="static-pdepend"/>
        </parallel>
    </target>

    <target name="static-lint" description="Perform syntax check of sourcecode files">
        <exec executable="bash" failonerror="true">
            <arg value="-c"/>
            <arg value="find -L ${basedir}/engine/Shopware/ -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l"/>
        </exec>
    </target>

    <target name="static-phpcs" description="PHP CodeSniffer">
        <exec executable="${script.phpcs}" output="/dev/null" failonerror="false">
            <arg value="--standard=${build.dir}"/>
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${log.dir}/checkstyle.xml"/>
            <arg value="--extensions=php"/>
            <arg value="-n"/>
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-phpmd" description="PHP Mess Detector">
        <exec executable="${script.phpmd}" failonerror="false" error="${log.dir}/error.log" append="true">
            <arg value="${app.dir}/"/>
            <arg value="xml"/>
            <arg value="codesize,design,unusedcode"/>
            <arg value="--reportfile"/>
            <arg value="${log.dir}/pmd.xml"/>
        </exec>
    </target>

    <target name="static-phpcpd" description="PHP Copy/Paste Detector">
        <exec executable="${script.phpcpd}"
              failonerror="false"
              output="/dev/null"
              error="${log.dir}/error.log"
              append="true">
            <arg value="--log-pmd"/>
            <arg value="${log.dir}/cpd.xml"/>
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-phploc" description="PHP Lines of Code">
        <exec executable="${script.phploc}"
              failonerror="false"
              output="${log.dir}/loc.txt"
              error="${log.dir}/error.log"
              append="true">
            <arg value="--log-xml"/>
            <arg value="${log.dir}/loc.xml"/>
            <arg value="--log-csv"/>
            <arg value="${log.dir}/loc.csv"/>
            <arg value="--count-tests"/>
            <arg value="${app.dir}/"/>
        </exec>
    </target>

    <target name="static-pdepend">
        <mkdir dir="${log.dir}/depend"/>
        <exec executable="${script.pdepend}"
              failonerror="false"
              output="${log.dir}/depend/output.txt"
              error="${log.dir}/error.log"
              append="true"
              dir="${app.dir}">
            <arg value="--summary-xml=${log.dir}/depend/summary.xml"/>
            <arg value="--jdepend-chart=${log.dir}/depend/jdepend.svg"/>
            <arg value="--overview-pyramid=${log.dir}/depend/pyramid.svg"/>
            <arg value="${app.dir}"/>
        </exec>
    </target>

    <target name="build-phpcb" description="Build CodeBrowser">
        <exec executable="${script.phpcb}"
              failonerror="false"
              output="/dev/null"
              error="${log.dir}/error.log"
              append="true">
            <arg value="-l${log.dir}"/>
            <arg value="-o${log.dir}/code-browser"/>
            <arg value="-s${app.dir}"/>
        </exec>
    </target>

    <!--
        Installation of sass/compass on Debian/Ubuntu

        sudo aptitude install rubygems
        sudo gem update
        sudo gem install sass
        sudo gem install compass
    -->
    <target name="compile-extjs">
        <exec executable="compass" dir="${basedir}/themes/Backend/ExtJs/backend/_resources">
            <arg value="compile"/>
            <arg value="--force"/>
            <arg value="resources/sass/"/>
        </exec>
    </target>

    <target name="watch-extjs">
        <exec executable="compass" dir="${basedir}/themes/Backend/ExtJs/backend/_resources">
            <arg value="watch"/>
            <arg value="resources/sass/"/>
        </exec>
    </target>

    <target name="compile-tinymce" description="Builds a TinyMce package with default used plugins">
        <!-- Combine all files -->
        <concat destfile="${basedir}/engine/Library/TinyMce/tiny_mce_full.js">
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="tiny_mce.js"/>
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="themes/advanced/langs/en.js"/>
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="themes/advanced/langs/de.js"/>
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="plugins/media_selection/editor_plugin.js"/>
            <fileset dir="${basedir}/engine/Library/TinyMce/" includes="plugins/fullscreen/editor_plugin.js"/>
        </concat>
    </target>
</project>
